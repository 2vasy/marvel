{"version":3,"file":"static/js/349.2d57ff10.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    // <img src={ProcessingInstruction.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n    <img  style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error.gif\" />\n  )\n};\n\nexport default ErrorMessage;\n","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage'\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to= {`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\"\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <AppBanner />\n      <ComicsList />\n    </>\n  )\n};\n\nexport default ComicsPage;\n","import { useState, useCallback } from \"react\"\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n    setLoading(true);\n    try {\n      const response = await fetch(url, { method, body, headers });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.massage);\n      throw e;\n    }\n  }, [])\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  }\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const {loading, request, error, clearError} = useHttp();\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=9dd034565ccd5274cc3af31734f6373c';\n  const _baseOffset = 210;\n\n\n  const getAllCharacters = async (offset =_baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter)\n  }\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  }\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n      );\n    return res.data.results.map(_transformComics);\n  }\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n    return _transformComics(res.data.results[0]);\n  }\n  \n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getComic\n  }\n}\n\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","ComicsList","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","children","_jsxs","Link","to","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","massage","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}