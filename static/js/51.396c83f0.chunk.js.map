{"version":3,"file":"static/js/51.396c83f0.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/errorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    // <img src={ProcessingInstruction.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n    <img  style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error.gif\" />\n  )\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Spinner from '../spinner/spinner';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter,clearError } = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage'\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n\n    const {loading, error, getAllCharacters} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newIntemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n\n    }\n\n\n    const itemRefs =useRef([]);\n\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el=> itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{ 'display': charEnded ? 'none' : 'block' }}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState, } from 'react';\nimport { PropTypes } from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Spinner from '../spinner/spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst  CharInfo =(props) =>  {\n  const [char, setChar] = useState(null);\n\n\n\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  },[props.charId]) \n\n\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n\n \n    getCharacter(charId)\n      .then(onCharLoaded)\n  }\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n      <div className=\"char__info\">\n        {skeleton}\n        {errorMessage}\n        {spinner}\n        {content}\n      </div>\n    )\n\n}\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let imgStyle = { 'objectFit': 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { 'objectFit': 'contain' };\n  }\n\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is comics with this character'}\n\n        {\n          comics.map((item, i) => {\n            // eslint-disable-next-line\n            if (i > 9) return;\n            return (\n              <li key={i} className=\"char__comics-item\">\n                {item.name}\n              </li>\n            )\n          })}\n      </ul>\n    </>\n  )\n}\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false \n  }\n  // static getDerivedStateFromError(error) {\n  //   return {error: true};\n  // }\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error:true\n    })\n  }\n\n  render(){\n    if(this.state.error) {\n      return <ErrorMessage/>\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/errorBoundary\";\nimport decoration from '../../resources/img/vision.png';\n\n\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null)\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  }\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  )\n};\n\nexport default MainPage;   \n","import { useState, useCallback } from \"react\"\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n    setLoading(true);\n    try {\n      const response = await fetch(url, { method, body, headers });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.massage);\n      throw e;\n    }\n  }, [])\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  }\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const {loading, request, error, clearError} = useHttp();\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=9dd034565ccd5274cc3af31734f6373c';\n  const _baseOffset = 210;\n\n\n  const getAllCharacters = async (offset =_baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter)\n  }\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  }\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n      );\n    return res.data.results.map(_transformComics);\n  }\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n    return _transformComics(res.data.results[0]);\n  }\n  \n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getComic\n  }\n}\n\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","newIntemLoading","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","massage","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}